# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  actions: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release, ReleaseMSVC]
        c_compiler: [clang, cl]
        include:
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
        exclude:
          - os: ubuntu-latest
            build_type: ReleaseMSVC
          - os: ubuntu-latest
            c_compiler: cl
          - os: windows-latest
            build_type: Release
          - os: windows-latest
            c_compiler: clang
      
    concurrency:
      group: build_${{ github.ref }}_${{ matrix.os }}
      
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Add clang path to $PATH env
      if: runner.os == 'Windows'
      run: echo "PATH=$PATH:C:\msys64\mingw64\bin" >> $GITHUB_ENV

    - name: Install Dependencies
      uses: amitie10g/install-package@v1
      with:
        apt: libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config libsdl2-dev

    - name: Vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ github.workspace }}/deps/vcpkg'

    - name: Setup Ccache
      uses: jianmingyong/ccache-action@v1
      with:
        ccache-key-prefix: ccache_cache_${{ matrix.os }}
        max-size: 150M

    - name: Configure CMake
      run: cmake --preset "${{ matrix.build_type }}" -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache

    - name: Build Tests
      run: cmake --build --preset "${{ matrix.build_type }}" --target core-lib-tests

    - name: Test
      run: ctest --preset ${{ matrix.build_type }}

    - name: Build Game Client
      run: cmake --build --preset "${{ matrix.build_type }}" --target game-client

    - name: Archive
      uses: actions/upload-artifact@v4
      with:
        name: game-client
        path: |
          build/release/game-client/game-client
          build/release/game-client/assets/
